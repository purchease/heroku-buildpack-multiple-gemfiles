#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# This was a great aid to writing this script:
# https://github.com/heroku/heroku-buildpack-ci-postgresql/blob/master/bin/compile

# fail fast
#set -e

# debug
#set -x

echo "-----> In bin/compile"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

bundle_without='development:test'
if [ -f "$ENV_DIR/BUNDLE_WITHOUT" ]
then
  bundle_without="$(cat $ENV_DIR/BUNDLE_WITHOUT)"
fi

# The heroku ruby buildpack will have already installed the gems for the default Gemfile, so now
# install the missing gems from Gemfile_next.
echo "-----> Installing Gemfile_next gems"
echo "       Running: BUNDLE_GEMFILE=Gemfile_next bundle install --without $bundle_without --path vendor/bundle --binstubs vendor/bundle/bin -j4 --deployment"
cd $BUILD_DIR
set -o pipefail # Enable pipefail so failure exit code from bundle install will not be lost by pipe to indent.
BUNDLE_GEMFILE=Gemfile_next bundle install --without $bundle_without --path vendor/bundle --binstubs vendor/bundle/bin -j4 --deployment | indent
bundle_install_status=$?
set +o pipefail # Disable pipefail, only needed for above command as it is pipes to indent.

if [ $bundle_install_status -ne 0 ]; then
  error "bundle install error: This can happen when Gemfile_next.lock falls out of sync with Gemfile_next. Check the committed Gemfile_next.lock is up-to-date."
fi

# https://devcenter.heroku.com/articles/buildpack-api#bin-compile
export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

echo "-----> Preparing env variables for asset compilation"
export_env_dir $ENV_DIR

echo "-----> Preparing app for Rails asset pipeline (using Gemfile_next gems)"
echo "       Running: BUNDLE_GEMFILE=Gemfile_next rake assets:precompile"
cd $BUILD_DIR
set -o pipefail # Enable pipefail so failure exit code from bundle install will not be lost by pipe to indent.
BUNDLE_GEMFILE=Gemfile_next rake assets:precompile | indent
assets_precompile_status=$?
set +o pipefail # Disable pipefail, only needed for above command as it is pipes to indent.

if [ $assets_precompile_status -ne 0 ]; then
  error "Asset precompilation failed."
else
  echo "       Asset precompilation completed."
fi

echo "-----> Writing .profile.d/multiple-gemfiles.sh to run on dyno startup"
mkdir -p .profile.d
cat<<\EOF > .profile.d/multiple-gemfiles.sh
server_id=$DYNO

echo "[multiple-gemfiles.sh] Preparing env vars for server: $server_id"
echo "---------------------> Unsetting DEPENDENCIES_NEXT"
unset DEPENDENCIES_NEXT
echo "---------------------> setting BUNDLE_GEMFILE as default Gemfile"
export BUNDLE_GEMFILE=$HOME/Gemfile

# DEPENDENCIES_NEXT_DYNOS is a comma-separated string of dynos that should use Gemfile_next,
# and glob wildcards can be used in the following ways:
#     * => matches all dynos (*.* also works the same)
# web.* => matches all web dynos
#   *.2 => matches all dynos with index 2, e.g. web.2, worker.2, resque.2, etc.
#
# Examples:
#               Selected dynos only: DEPENDENCIES_NEXT_DYNOS=web.9,web.10,worker.10,resque.3
#                         All dynos: DEPENDENCIES_NEXT_DYNOS=*
#   All scheduler and one-off dynos: DEPENDENCIES_NEXT_DYNOS=scheduler.*,run.*
# web.1, web.2 and all worker dynos: DEPENDENCIES_NEXT_DYNOS=web.1,web.2,worker.*
#           All index 1 and 2 dynos: DEPENDENCIES_NEXT_DYNOS=*.1,*.2
next_server_ids=$DEPENDENCIES_NEXT_DYNOS

function is_next_server() {
  # Split on comma into next_servers array
  IFS=',' # set comma as delimiter
  read -ra next_servers <<< "$next_server_ids" # split on comma delimiter

  for next_server in "${next_servers[@]}"; do
    # This supports glob matching (*)
    if [[ "$server_id" == $next_server ]]; then
      # matches => this server will use Gemfile_next.
      true
      return
    fi
  done

  # No match => this server will use Gemfile.
  false
  return
}

if [ -n "$next_server_ids" ]; then
  if is_next_server; then
    echo "---------------------> Setting DEPENDENCIES_NEXT=true"
    export DEPENDENCIES_NEXT=true
    echo "---------------------> Setting BUNDLE_GEMFILE=$HOME/Gemfile_next"
    export BUNDLE_GEMFILE=$HOME/Gemfile_next
  fi
fi

EOF

echo "-----> Multiple Gemfiles done"
